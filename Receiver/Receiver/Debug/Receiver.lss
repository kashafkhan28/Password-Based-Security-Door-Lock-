
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084f  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006df  00000000  00000000  00000a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  0000115e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f1  00000000  00000000  000018af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  80:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <ReceivePassword>:
    }
}

char ReceivePassword(void){
	//receiver declarations
	PORTC=0;
  88:	15 ba       	out	0x15, r1	; 21
	char receivePassword=0;
	while (!(UCSR0A&(1<<RXC0)));
  8a:	5f 9b       	sbis	0x0b, 7	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <ReceivePassword+0x2>
	receivePassword=UDR0;
  8e:	8c b1       	in	r24, 0x0c	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f e3       	ldi	r18, 0x3F	; 63
  92:	3d e0       	ldi	r19, 0x0D	; 13
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <ReceivePassword+0xe>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <ReceivePassword+0x18>
  a0:	00 00       	nop
	_delay_ms(1000);
	return receivePassword;
}
  a2:	08 95       	ret

000000a4 <TransmitStatus>:

void TransmitStatus(int status)
{
	//transmitter declarations
	//transmission code
	while(!(UCSR0A&(1<<UDRE0)));
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <TransmitStatus>
	UDR0 = status;
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	2f e3       	ldi	r18, 0x3F	; 63
  ac:	8d e0       	ldi	r24, 0x0D	; 13
  ae:	93 e0       	ldi	r25, 0x03	; 3
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <TransmitStatus+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <TransmitStatus+0x16>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	char match = '5'; //original password
	//receiving and transmission declarations
	UBRR0H = 0X00;
  be:	10 bc       	out	0x20, r1	; 32
	UBRR0L = 0X05;
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	89 b9       	out	0x09, r24	; 9
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  c4:	8e e8       	ldi	r24, 0x8E	; 142
  c6:	80 bd       	out	0x20, r24	; 32
	DDRD&=~(1<<PD0);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	81 bb       	out	0x11, r24	; 17
	DDRD|=1<<PD1;
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	81 bb       	out	0x11, r24	; 17
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	8a b9       	out	0x0a, r24	; 10
	char pass;
	DDRA=0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	8a bb       	out	0x1a, r24	; 26
	PORTA=0b11000110;
  dc:	86 ec       	ldi	r24, 0xC6	; 198
  de:	8b bb       	out	0x1b, r24	; 27
	
	//PUSH Button declaration
	DDRB = 0x00;
  e0:	17 ba       	out	0x17, r1	; 23
	
	//main declarations
	int status=0b11000110; //door status

	
	TransmitStatus(status);
  e2:	86 ec       	ldi	r24, 0xC6	; 198
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <TransmitStatus>
	//PUSH Button declaration
	DDRB = 0x00;
	int push_button;
	
	//main declarations
	int status=0b11000110; //door status
  ea:	c6 ec       	ldi	r28, 0xC6	; 198
  ec:	d0 e0       	ldi	r29, 0x00	; 0
	
	TransmitStatus(status);
    /* Replace with your application code */
    while (1) 
    {
		pass=ReceivePassword();
  ee:	0e 94 44 00 	call	0x88	; 0x88 <ReceivePassword>
		push_button=(PINB&0x01);
  f2:	96 b3       	in	r25, 0x16	; 22
		PORTC=0;
  f4:	15 ba       	out	0x15, r1	; 21
		if (push_button==0) //if push button is not pressed and password matches original password unlatch the door
  f6:	90 fd       	sbrc	r25, 0
  f8:	1a c0       	rjmp	.+52     	; 0x12e <main+0x70>
		{ 
			if (pass==match) //matching received password with original password
  fa:	85 33       	cpi	r24, 0x35	; 53
  fc:	d1 f4       	brne	.+52     	; 0x132 <main+0x74>
			{
				//Rotate Motor to 90 degree
				PORTC = 0x01;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	85 bb       	out	0x15, r24	; 21
 102:	2f ed       	ldi	r18, 0xDF	; 223
 104:	83 e9       	ldi	r24, 0x93	; 147
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x4a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x54>
 112:	00 00       	nop
				_delay_ms(1500);
				PORTC = 0x00;
 114:	15 ba       	out	0x15, r1	; 21
 116:	2f e7       	ldi	r18, 0x7F	; 127
 118:	8a e1       	ldi	r24, 0x1A	; 26
 11a:	96 e0       	ldi	r25, 0x06	; 6
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x5e>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x68>
 126:	00 00       	nop
				_delay_ms(2000);
				status=0b11000000;	
 128:	c0 ec       	ldi	r28, 0xC0	; 192
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0x74>
			}
		}
		else //if push button is pressed latch the door
		{
			status=0b11000110;
 12e:	c6 ec       	ldi	r28, 0xC6	; 198
 130:	d0 e0       	ldi	r29, 0x00	; 0
		}
		TransmitStatus(status);
 132:	ce 01       	movw	r24, r28
 134:	0e 94 52 00 	call	0xa4	; 0xa4 <TransmitStatus>
    }
 138:	da cf       	rjmp	.-76     	; 0xee <main+0x30>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
